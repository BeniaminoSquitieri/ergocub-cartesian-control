name: CI Workflow

on:
  workflow_dispatch:

jobs:

  check-style:
    name: 'Check Style'
    runs-on: ubuntu-24.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check Style
      run: |
        perl tests/misc/check_style.pl

  check-license:
    name: 'Check License'
    runs-on: ubuntu-24.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y perl
    - name: Check License
      run: |
        perl tests/misc/check_license.pl
        
  check-tests:
    name: 'Check Devices Tests'
    runs-on: ubuntu-24.04
    steps:
    - name: Clone repository
      uses: actions/checkout@v3
    - name: Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -qq -y python3
    - name: Check Devices Tests
      run: |
        python3 tests/misc/check_tests.py
        
  build:
    name: '[${{ matrix.os }}@${{ matrix.build_type }}@conda]'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [ubuntu-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest
        environment-file: environment.yml

    - name: Dependencies
      shell: bash -l {0}
      run: |
        # Compilation related dependencies
        conda install cmake compilers make ninja pkg-config
        
    - name: Configure [Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        mkdir -p build
        cd build
        cmake -G"Ninja" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                      -DCMAKE_INSTALL_PREFIX=${CONDA_PREFIX} .. \

    - name: Build [Linux]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}

    - name: Install [Linux&macOS]
      if: contains(matrix.os, 'ubuntu')
      shell: bash -l {0}
      run: |
        cd build
        cmake --install . --config ${{ matrix.build_type }}