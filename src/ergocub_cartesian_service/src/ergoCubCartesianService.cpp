/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <gb-ergocub-cartesian-service/ergoCubCartesianService.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

// go_to_pose helper class declaration
class ergoCubCartesianService_go_to_pose_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_go_to_pose_helper() = default;
    ergoCubCartesianService_go_to_pose_helper(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const double traj_duration);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const double traj_duration);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double x{0.0};
        double y{0.0};
        double z{0.0};
        double q_x{0.0};
        double q_y{0.0};
        double q_z{0.0};
        double q_w{0.0};
        double traj_duration{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double, const double, const double, const double, const double, const double);
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"go_to_pose"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{11};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubCartesianService::go_to_pose(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const double traj_duration)"};
    static constexpr const char* s_help{""};
};

// go_to_position helper class declaration
class ergoCubCartesianService_go_to_position_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_go_to_position_helper() = default;
    ergoCubCartesianService_go_to_position_helper(const double x, const double y, const double z, const double traj_duration);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double x, const double y, const double z, const double traj_duration);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double x{0.0};
        double y{0.0};
        double z{0.0};
        double traj_duration{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double, const double);
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"go_to_position"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{7};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubCartesianService::go_to_position(const double x, const double y, const double z, const double traj_duration)"};
    static constexpr const char* s_help{""};
};

// rotate_rad helper class declaration
class ergoCubCartesianService_rotate_rad_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_rotate_rad_helper() = default;
    ergoCubCartesianService_rotate_rad_helper(const double angle, const double x, const double y, const double z, const double traj_duration);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double angle, const double x, const double y, const double z, const double traj_duration);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double angle{0.0};
        double x{0.0};
        double y{0.0};
        double z{0.0};
        double traj_duration{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double, const double, const double);
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"rotate_rad"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{7};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubCartesianService::rotate_rad(const double angle, const double x, const double y, const double z, const double traj_duration)"};
    static constexpr const char* s_help{""};
};

// rotate_deg helper class declaration
class ergoCubCartesianService_rotate_deg_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_rotate_deg_helper() = default;
    ergoCubCartesianService_rotate_deg_helper(const double angle, const double x, const double y, const double z, const double traj_duration);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double angle, const double x, const double y, const double z, const double traj_duration);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double angle{0.0};
        double x{0.0};
        double y{0.0};
        double z{0.0};
        double traj_duration{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double, const double, const double);
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"rotate_deg"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{7};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubCartesianService::rotate_deg(const double angle, const double x, const double y, const double z, const double traj_duration)"};
    static constexpr const char* s_help{""};
};

// get_pose helper class declaration
class ergoCubCartesianService_get_pose_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_get_pose_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::sig::Matrix return_helper{};
    };

    using funcptr_t = yarp::sig::Matrix (*)();
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_pose"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::sig::Matrix ergoCubCartesianService::get_pose()"};
    static constexpr const char* s_help{""};
};

// go_home helper class declaration
class ergoCubCartesianService_go_home_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_go_home_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"go_home"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubCartesianService::go_home()"};
    static constexpr const char* s_help{""};
};

// is_motion_done helper class declaration
class ergoCubCartesianService_is_motion_done_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_is_motion_done_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"is_motion_done"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubCartesianService::is_motion_done()"};
    static constexpr const char* s_help{""};
};

// ask_reachability_evaluation helper class declaration
class ergoCubCartesianService_ask_reachability_evaluation_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_ask_reachability_evaluation_helper() = default;
    explicit ergoCubCartesianService_ask_reachability_evaluation_helper(const yarp::sig::Matrix& pose);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const yarp::sig::Matrix& pose);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        yarp::sig::Matrix pose{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const yarp::sig::Matrix&);
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"ask_reachability_evaluation"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{4};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubCartesianService::ask_reachability_evaluation(const yarp::sig::Matrix& pose)"};
    static constexpr const char* s_help{""};
};

// retrieve_reachable_pose helper class declaration
class ergoCubCartesianService_retrieve_reachable_pose_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_retrieve_reachable_pose_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::sig::Matrix return_helper{};
    };

    using funcptr_t = yarp::sig::Matrix (*)();
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"retrieve_reachable_pose"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::sig::Matrix ergoCubCartesianService::retrieve_reachable_pose()"};
    static constexpr const char* s_help{""};
};

// stop helper class declaration
class ergoCubCartesianService_stop_helper :
        public yarp::os::Portable
{
public:
    ergoCubCartesianService_stop_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(ergoCubCartesianService* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"stop"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ergoCubCartesianService::stop()"};
    static constexpr const char* s_help{""};
};

// go_to_pose helper class implementation
ergoCubCartesianService_go_to_pose_helper::ergoCubCartesianService_go_to_pose_helper(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const double traj_duration) :
        cmd{x, y, z, q_x, q_y, q_z, q_w, traj_duration}
{
}

bool ergoCubCartesianService_go_to_pose_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_go_to_pose_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubCartesianService_go_to_pose_helper::Command::Command(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const double traj_duration) :
        x{x},
        y{y},
        z{z},
        q_x{q_x},
        q_y{q_y},
        q_z{q_z},
        q_w{q_w},
        traj_duration{traj_duration}
{
}

bool ergoCubCartesianService_go_to_pose_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_go_to_pose_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_go_to_pose_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_pose_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_pose_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(x)) {
        return false;
    }
    if (!writer.writeFloat64(y)) {
        return false;
    }
    if (!writer.writeFloat64(z)) {
        return false;
    }
    if (!writer.writeFloat64(q_x)) {
        return false;
    }
    if (!writer.writeFloat64(q_y)) {
        return false;
    }
    if (!writer.writeFloat64(q_z)) {
        return false;
    }
    if (!writer.writeFloat64(q_w)) {
        return false;
    }
    if (!writer.writeFloat64(traj_duration)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_pose_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_pose_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_pose_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(q_x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(q_y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(q_z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(q_w)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(traj_duration)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_pose_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_go_to_pose_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_go_to_pose_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_go_to_pose_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_go_to_pose_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->go_to_pose(cmd.x, cmd.y, cmd.z, cmd.q_x, cmd.q_y, cmd.q_z, cmd.q_w, cmd.traj_duration);
}

// go_to_position helper class implementation
ergoCubCartesianService_go_to_position_helper::ergoCubCartesianService_go_to_position_helper(const double x, const double y, const double z, const double traj_duration) :
        cmd{x, y, z, traj_duration}
{
}

bool ergoCubCartesianService_go_to_position_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_go_to_position_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubCartesianService_go_to_position_helper::Command::Command(const double x, const double y, const double z, const double traj_duration) :
        x{x},
        y{y},
        z{z},
        traj_duration{traj_duration}
{
}

bool ergoCubCartesianService_go_to_position_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_go_to_position_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_go_to_position_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_position_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_position_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(x)) {
        return false;
    }
    if (!writer.writeFloat64(y)) {
        return false;
    }
    if (!writer.writeFloat64(z)) {
        return false;
    }
    if (!writer.writeFloat64(traj_duration)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_position_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_position_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_position_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(traj_duration)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_to_position_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_go_to_position_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_go_to_position_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_go_to_position_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_go_to_position_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->go_to_position(cmd.x, cmd.y, cmd.z, cmd.traj_duration);
}

// rotate_rad helper class implementation
ergoCubCartesianService_rotate_rad_helper::ergoCubCartesianService_rotate_rad_helper(const double angle, const double x, const double y, const double z, const double traj_duration) :
        cmd{angle, x, y, z, traj_duration}
{
}

bool ergoCubCartesianService_rotate_rad_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_rotate_rad_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubCartesianService_rotate_rad_helper::Command::Command(const double angle, const double x, const double y, const double z, const double traj_duration) :
        angle{angle},
        x{x},
        y{y},
        z{z},
        traj_duration{traj_duration}
{
}

bool ergoCubCartesianService_rotate_rad_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_rotate_rad_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_rotate_rad_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_rad_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_rad_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(angle)) {
        return false;
    }
    if (!writer.writeFloat64(x)) {
        return false;
    }
    if (!writer.writeFloat64(y)) {
        return false;
    }
    if (!writer.writeFloat64(z)) {
        return false;
    }
    if (!writer.writeFloat64(traj_duration)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_rad_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_rad_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_rad_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(angle)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(traj_duration)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_rad_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_rotate_rad_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_rotate_rad_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_rotate_rad_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_rotate_rad_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->rotate_rad(cmd.angle, cmd.x, cmd.y, cmd.z, cmd.traj_duration);
}

// rotate_deg helper class implementation
ergoCubCartesianService_rotate_deg_helper::ergoCubCartesianService_rotate_deg_helper(const double angle, const double x, const double y, const double z, const double traj_duration) :
        cmd{angle, x, y, z, traj_duration}
{
}

bool ergoCubCartesianService_rotate_deg_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_rotate_deg_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubCartesianService_rotate_deg_helper::Command::Command(const double angle, const double x, const double y, const double z, const double traj_duration) :
        angle{angle},
        x{x},
        y{y},
        z{z},
        traj_duration{traj_duration}
{
}

bool ergoCubCartesianService_rotate_deg_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_rotate_deg_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_rotate_deg_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_deg_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_deg_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(angle)) {
        return false;
    }
    if (!writer.writeFloat64(x)) {
        return false;
    }
    if (!writer.writeFloat64(y)) {
        return false;
    }
    if (!writer.writeFloat64(z)) {
        return false;
    }
    if (!writer.writeFloat64(traj_duration)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_deg_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_deg_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_deg_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(angle)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(z)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(traj_duration)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_rotate_deg_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_rotate_deg_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_rotate_deg_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_rotate_deg_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_rotate_deg_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->rotate_deg(cmd.angle, cmd.x, cmd.y, cmd.z, cmd.traj_duration);
}

// get_pose helper class implementation
bool ergoCubCartesianService_get_pose_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_get_pose_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ergoCubCartesianService_get_pose_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_get_pose_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_get_pose_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_get_pose_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_get_pose_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ergoCubCartesianService_get_pose_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_get_pose_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_get_pose_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_get_pose_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_get_pose_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_get_pose_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_get_pose_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_get_pose_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->get_pose();
}

// go_home helper class implementation
bool ergoCubCartesianService_go_home_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_go_home_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ergoCubCartesianService_go_home_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_go_home_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_go_home_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_home_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_home_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ergoCubCartesianService_go_home_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_home_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_home_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_go_home_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_go_home_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_go_home_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_go_home_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_go_home_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->go_home();
}

// is_motion_done helper class implementation
bool ergoCubCartesianService_is_motion_done_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_is_motion_done_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ergoCubCartesianService_is_motion_done_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_is_motion_done_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_is_motion_done_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_is_motion_done_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_is_motion_done_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ergoCubCartesianService_is_motion_done_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_is_motion_done_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_is_motion_done_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_is_motion_done_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_is_motion_done_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_is_motion_done_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_is_motion_done_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_is_motion_done_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->is_motion_done();
}

// ask_reachability_evaluation helper class implementation
ergoCubCartesianService_ask_reachability_evaluation_helper::ergoCubCartesianService_ask_reachability_evaluation_helper(const yarp::sig::Matrix& pose) :
        cmd{pose}
{
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ergoCubCartesianService_ask_reachability_evaluation_helper::Command::Command(const yarp::sig::Matrix& pose) :
        pose{pose}
{
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(pose)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(pose)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_ask_reachability_evaluation_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_ask_reachability_evaluation_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->ask_reachability_evaluation(cmd.pose);
}

// retrieve_reachable_pose helper class implementation
bool ergoCubCartesianService_retrieve_reachable_pose_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_retrieve_reachable_pose_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_retrieve_reachable_pose_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->retrieve_reachable_pose();
}

// stop helper class implementation
bool ergoCubCartesianService_stop_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ergoCubCartesianService_stop_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ergoCubCartesianService_stop_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ergoCubCartesianService_stop_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ergoCubCartesianService_stop_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_stop_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_stop_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ergoCubCartesianService_stop_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ergoCubCartesianService_stop_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_stop_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ergoCubCartesianService_stop_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ergoCubCartesianService_stop_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ergoCubCartesianService_stop_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ergoCubCartesianService_stop_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ergoCubCartesianService_stop_helper::call(ergoCubCartesianService* ptr)
{
    reply.return_helper = ptr->stop();
}

// Constructor
ergoCubCartesianService::ergoCubCartesianService()
{
    yarp().setOwner(*this);
}

bool ergoCubCartesianService::go_to_pose(const double x, const double y, const double z, const double q_x, const double q_y, const double q_z, const double q_w, const double traj_duration)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_go_to_pose_helper::s_prototype);
    }
    ergoCubCartesianService_go_to_pose_helper helper{x, y, z, q_x, q_y, q_z, q_w, traj_duration};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool ergoCubCartesianService::go_to_position(const double x, const double y, const double z, const double traj_duration)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_go_to_position_helper::s_prototype);
    }
    ergoCubCartesianService_go_to_position_helper helper{x, y, z, traj_duration};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool ergoCubCartesianService::rotate_rad(const double angle, const double x, const double y, const double z, const double traj_duration)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_rotate_rad_helper::s_prototype);
    }
    ergoCubCartesianService_rotate_rad_helper helper{angle, x, y, z, traj_duration};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool ergoCubCartesianService::rotate_deg(const double angle, const double x, const double y, const double z, const double traj_duration)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_rotate_deg_helper::s_prototype);
    }
    ergoCubCartesianService_rotate_deg_helper helper{angle, x, y, z, traj_duration};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

yarp::sig::Matrix ergoCubCartesianService::get_pose()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_get_pose_helper::s_prototype);
    }
    ergoCubCartesianService_get_pose_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::sig::Matrix{};
}

bool ergoCubCartesianService::go_home()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_go_home_helper::s_prototype);
    }
    ergoCubCartesianService_go_home_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool ergoCubCartesianService::is_motion_done()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_is_motion_done_helper::s_prototype);
    }
    ergoCubCartesianService_is_motion_done_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool ergoCubCartesianService::ask_reachability_evaluation(const yarp::sig::Matrix& pose)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_ask_reachability_evaluation_helper::s_prototype);
    }
    ergoCubCartesianService_ask_reachability_evaluation_helper helper{pose};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

yarp::sig::Matrix ergoCubCartesianService::retrieve_reachable_pose()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_retrieve_reachable_pose_helper::s_prototype);
    }
    ergoCubCartesianService_retrieve_reachable_pose_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::sig::Matrix{};
}

bool ergoCubCartesianService::stop()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ergoCubCartesianService_stop_helper::s_prototype);
    }
    ergoCubCartesianService_stop_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

// help method
std::vector<std::string> ergoCubCartesianService::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(ergoCubCartesianService_go_to_pose_helper::s_tag);
        helpString.emplace_back(ergoCubCartesianService_go_to_position_helper::s_tag);
        helpString.emplace_back(ergoCubCartesianService_rotate_rad_helper::s_tag);
        helpString.emplace_back(ergoCubCartesianService_rotate_deg_helper::s_tag);
        helpString.emplace_back(ergoCubCartesianService_get_pose_helper::s_tag);
        helpString.emplace_back(ergoCubCartesianService_go_home_helper::s_tag);
        helpString.emplace_back(ergoCubCartesianService_is_motion_done_helper::s_tag);
        helpString.emplace_back(ergoCubCartesianService_ask_reachability_evaluation_helper::s_tag);
        helpString.emplace_back(ergoCubCartesianService_retrieve_reachable_pose_helper::s_tag);
        helpString.emplace_back(ergoCubCartesianService_stop_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == ergoCubCartesianService_go_to_pose_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_go_to_pose_helper::s_prototype);
        }
        if (functionName == ergoCubCartesianService_go_to_position_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_go_to_position_helper::s_prototype);
        }
        if (functionName == ergoCubCartesianService_rotate_rad_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_rotate_rad_helper::s_prototype);
        }
        if (functionName == ergoCubCartesianService_rotate_deg_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_rotate_deg_helper::s_prototype);
        }
        if (functionName == ergoCubCartesianService_get_pose_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_get_pose_helper::s_prototype);
        }
        if (functionName == ergoCubCartesianService_go_home_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_go_home_helper::s_prototype);
        }
        if (functionName == ergoCubCartesianService_is_motion_done_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_is_motion_done_helper::s_prototype);
        }
        if (functionName == ergoCubCartesianService_ask_reachability_evaluation_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_ask_reachability_evaluation_helper::s_prototype);
        }
        if (functionName == ergoCubCartesianService_retrieve_reachable_pose_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_retrieve_reachable_pose_helper::s_prototype);
        }
        if (functionName == ergoCubCartesianService_stop_helper::s_tag) {
            helpString.emplace_back(ergoCubCartesianService_stop_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool ergoCubCartesianService::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 3;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == ergoCubCartesianService_go_to_pose_helper::s_tag) {
            ergoCubCartesianService_go_to_pose_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubCartesianService_go_to_position_helper::s_tag) {
            ergoCubCartesianService_go_to_position_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubCartesianService_rotate_rad_helper::s_tag) {
            ergoCubCartesianService_rotate_rad_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubCartesianService_rotate_deg_helper::s_tag) {
            ergoCubCartesianService_rotate_deg_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubCartesianService_get_pose_helper::s_tag) {
            ergoCubCartesianService_get_pose_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubCartesianService_go_home_helper::s_tag) {
            ergoCubCartesianService_go_home_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubCartesianService_is_motion_done_helper::s_tag) {
            ergoCubCartesianService_is_motion_done_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubCartesianService_ask_reachability_evaluation_helper::s_tag) {
            ergoCubCartesianService_ask_reachability_evaluation_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubCartesianService_retrieve_reachable_pose_helper::s_tag) {
            ergoCubCartesianService_retrieve_reachable_pose_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ergoCubCartesianService_stop_helper::s_tag) {
            ergoCubCartesianService_stop_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
